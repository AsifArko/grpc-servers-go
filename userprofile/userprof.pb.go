// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userprof.proto

/*
Package userprof is a generated protocol buffer package.

It is generated from these files:
	userprof.proto

It has these top-level messages:
	ProfReq
	UserProf
	Hobbies
	RestraCoin
*/
package userprof

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProfReq struct {
	Fname string     `protobuf:"bytes,1,opt,name=Fname" json:"Fname,omitempty"`
	Lname string     `protobuf:"bytes,2,opt,name=Lname" json:"Lname,omitempty"`
	Dob   string     `protobuf:"bytes,3,opt,name=Dob" json:"Dob,omitempty"`
	Hobby []*Hobbies `protobuf:"bytes,4,rep,name=Hobby" json:"Hobby,omitempty"`
}

func (m *ProfReq) Reset()                    { *m = ProfReq{} }
func (m *ProfReq) String() string            { return proto.CompactTextString(m) }
func (*ProfReq) ProtoMessage()               {}
func (*ProfReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProfReq) GetFname() string {
	if m != nil {
		return m.Fname
	}
	return ""
}

func (m *ProfReq) GetLname() string {
	if m != nil {
		return m.Lname
	}
	return ""
}

func (m *ProfReq) GetDob() string {
	if m != nil {
		return m.Dob
	}
	return ""
}

func (m *ProfReq) GetHobby() []*Hobbies {
	if m != nil {
		return m.Hobby
	}
	return nil
}

type UserProf struct {
	Prof *ProfReq    `protobuf:"bytes,1,opt,name=Prof" json:"Prof,omitempty"`
	Rc   *RestraCoin `protobuf:"bytes,2,opt,name=Rc" json:"Rc,omitempty"`
}

func (m *UserProf) Reset()                    { *m = UserProf{} }
func (m *UserProf) String() string            { return proto.CompactTextString(m) }
func (*UserProf) ProtoMessage()               {}
func (*UserProf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserProf) GetProf() *ProfReq {
	if m != nil {
		return m.Prof
	}
	return nil
}

func (m *UserProf) GetRc() *RestraCoin {
	if m != nil {
		return m.Rc
	}
	return nil
}

type Hobbies struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *Hobbies) Reset()                    { *m = Hobbies{} }
func (m *Hobbies) String() string            { return proto.CompactTextString(m) }
func (*Hobbies) ProtoMessage()               {}
func (*Hobbies) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Hobbies) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hobbies) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RestraCoin struct {
	Coin int64 `protobuf:"varint,1,opt,name=Coin" json:"Coin,omitempty"`
}

func (m *RestraCoin) Reset()                    { *m = RestraCoin{} }
func (m *RestraCoin) String() string            { return proto.CompactTextString(m) }
func (*RestraCoin) ProtoMessage()               {}
func (*RestraCoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RestraCoin) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func init() {
	proto.RegisterType((*ProfReq)(nil), "ProfReq")
	proto.RegisterType((*UserProf)(nil), "UserProf")
	proto.RegisterType((*Hobbies)(nil), "Hobbies")
	proto.RegisterType((*RestraCoin)(nil), "RestraCoin")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CreateUser service

type CreateUserClient interface {
	HandleProfReq(ctx context.Context, in *ProfReq, opts ...grpc.CallOption) (*UserProf, error)
}

type createUserClient struct {
	cc *grpc.ClientConn
}

func NewCreateUserClient(cc *grpc.ClientConn) CreateUserClient {
	return &createUserClient{cc}
}

func (c *createUserClient) HandleProfReq(ctx context.Context, in *ProfReq, opts ...grpc.CallOption) (*UserProf, error) {
	out := new(UserProf)
	err := grpc.Invoke(ctx, "/CreateUser/HandleProfReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CreateUser service

type CreateUserServer interface {
	HandleProfReq(context.Context, *ProfReq) (*UserProf, error)
}

func RegisterCreateUserServer(s *grpc.Server, srv CreateUserServer) {
	s.RegisterService(&_CreateUser_serviceDesc, srv)
}

func _CreateUser_HandleProfReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateUserServer).HandleProfReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreateUser/HandleProfReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateUserServer).HandleProfReq(ctx, req.(*ProfReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CreateUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CreateUser",
	HandlerType: (*CreateUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleProfReq",
			Handler:    _CreateUser_HandleProfReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userprof.proto",
}

func init() { proto.RegisterFile("userprof.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x69, 0x92, 0xda, 0x76, 0x82, 0x22, 0x83, 0x87, 0xa0, 0x22, 0x21, 0x78, 0xe8, 0x29,
	0x87, 0xf8, 0x03, 0x3c, 0xb4, 0x4a, 0x0f, 0x22, 0x32, 0xe0, 0x0f, 0x48, 0xe2, 0x54, 0x02, 0x9a,
	0x8d, 0xb3, 0xeb, 0xc1, 0x7f, 0x2f, 0x33, 0x49, 0xad, 0xa7, 0x99, 0xf7, 0xb1, 0xbc, 0xf7, 0x76,
	0xe0, 0xec, 0xdb, 0xb3, 0x0c, 0xe2, 0xf6, 0xe5, 0x20, 0x2e, 0xb8, 0xe2, 0x1d, 0x16, 0x2f, 0xe2,
	0xf6, 0xc4, 0x5f, 0x78, 0x01, 0xf3, 0xc7, 0xbe, 0xfe, 0xe4, 0x6c, 0x96, 0xcf, 0xd6, 0x2b, 0x1a,
	0x85, 0xd2, 0x27, 0xa3, 0xd1, 0x48, 0x4d, 0xe0, 0x39, 0xc4, 0x5b, 0xd7, 0x64, 0xb1, 0x31, 0x5d,
	0xf1, 0x06, 0xe6, 0x3b, 0xd7, 0x34, 0x3f, 0x59, 0x92, 0xc7, 0xeb, 0xb4, 0x5a, 0x96, 0xaa, 0x3a,
	0xf6, 0x34, 0xe2, 0xe2, 0x01, 0x96, 0xaf, 0x9e, 0x45, 0xc3, 0xf0, 0x1a, 0x12, 0x9d, 0x16, 0xa4,
	0x4f, 0xa7, 0x06, 0x64, 0x14, 0xaf, 0x20, 0xa2, 0xd6, 0xe2, 0xd2, 0x2a, 0x2d, 0x89, 0x7d, 0x90,
	0x7a, 0xe3, 0xba, 0x9e, 0x22, 0x6a, 0x8b, 0x7b, 0x58, 0x4c, 0xc6, 0x88, 0x90, 0x3c, 0x1f, 0xeb,
	0xda, 0x8e, 0x39, 0xa4, 0x5b, 0xf6, 0xad, 0x74, 0x43, 0xe8, 0x5c, 0x3f, 0x75, 0xfe, 0x8f, 0x8a,
	0x1c, 0xe0, 0x68, 0xa9, 0x1e, 0x3a, 0xcd, 0x23, 0x26, 0xdb, 0xab, 0x0a, 0x60, 0x23, 0x5c, 0x07,
	0xd6, 0xbe, 0x78, 0x0b, 0xa7, 0xbb, 0xba, 0x7f, 0xfb, 0xe0, 0xc3, 0x99, 0xfe, 0xea, 0x5e, 0xae,
	0xca, 0xc3, 0x8f, 0x9a, 0x13, 0xbb, 0xe6, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xee,
	0x59, 0x5c, 0x5f, 0x01, 0x00, 0x00,
}
